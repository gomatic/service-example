// Code generated by go-bindata.
// sources:
// model/model.swagger.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelModelSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xb1\x8e\xdb\x30\x0c\xdd\xfd\x15\x04\xdb\x31\x38\xa7\x37\x66\xbf\xa1\x43\x97\x76\x2c\x32\xe8\x64\xc6\xd6\xc1\x96\x74\x24\x9d\xf6\x50\xf8\xdf\x0b\x29\xbe\x58\x76\x53\x20\x43\x81\x66\x62\xc4\xc7\x87\xf7\x9e\xdf\xaf\x0a\x00\xe5\x87\x69\x5b\x62\x3c\x00\x3e\x3e\xec\x71\x97\xde\x9c\x3f\x05\x3c\x40\xda\x03\xa0\x3a\xed\x29\xed\x87\xd0\x50\xff\x10\x39\x68\xc8\x38\x00\x3c\x13\x8b\x0b\x3e\x6d\xe7\x11\x7c\x50\x10\x52\xac\x00\xa6\xcc\x26\xb6\xa3\x81\x04\x0f\xf0\xfd\x72\xd4\xa9\xc6\x77\x82\x34\x4b\xc2\x1e\x33\xd6\x06\x2f\xe3\x0a\x6c\x62\xec\x9d\x35\xea\x82\xaf\x5f\x24\xf8\x05\x1b\x39\x34\xa3\xbd\x13\x6b\xb4\x93\xc5\x52\x7d\xfe\x54\xd3\x4f\x33\xc4\x9e\x6a\xb2\xdd\x62\x36\x41\x83\x68\xf1\x1f\x00\x43\x24\xce\xa4\x9f\x9b\x64\xf4\x29\x1d\xec\x96\x35\x93\xc4\xe0\x85\x64\x75\x05\x80\x8f\xfb\xfd\xe6\x09\x00\x1b\x12\xcb\x2e\xea\x9c\x5a\x41\x94\xd7\x39\x2c\xf3\xc7\x19\x00\x7e\x64\x3a\xa5\x8b\x0f\x75\x43\x27\xe7\x5d\x62\x90\x3a\x7f\x93\xa7\x8b\x95\xaf\xb3\x10\x5c\x9d\x4e\xd5\xad\x79\x2a\x0c\x44\xc3\x66\x20\x25\x5e\xa2\xbc\xfc\x36\xd2\xbd\x19\x72\x0f\x9e\x43\xf3\xb6\xd5\xed\xfc\xdf\x36\x4c\xaf\xa3\x63\x4a\xd1\x29\x8f\xf4\x4f\xfd\xbe\x8e\x24\x7a\x8f\xdd\x63\x61\x57\x4d\xbb\x35\x8a\x33\xe3\x37\xe2\xb3\xb3\x45\x80\xc7\xaa\x64\x9a\xae\x9d\x2e\x24\x2d\xad\xba\xa5\xad\x28\x96\xbe\xc5\x1c\x5f\x78\x7e\x21\xab\xd7\x98\x52\x8f\x23\xb1\xba\x4d\x81\xf0\x0b\x89\x98\x96\xb6\xad\x7a\xa7\x11\x65\xe7\xdb\x45\xea\xb4\x96\xba\xbb\xa5\x69\xee\xc7\x7f\x13\x95\xf2\xab\xa6\xea\x77\x00\x00\x00\xff\xff\xcc\x73\x31\x5b\x79\x04\x00\x00")

func modelModelSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_modelModelSwaggerJson,
		"model/model.swagger.json",
	)
}

func modelModelSwaggerJson() (*asset, error) {
	bytes, err := modelModelSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model/model.swagger.json", size: 1145, mode: os.FileMode(436), modTime: time.Unix(1494127403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model/model.swagger.json": modelModelSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model": &bintree{nil, map[string]*bintree{
		"model.swagger.json": &bintree{modelModelSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

